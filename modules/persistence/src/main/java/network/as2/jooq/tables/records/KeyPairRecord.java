/*
 * This file is generated by jOOQ.
 */
package network.as2.jooq.tables.records;


import java.time.OffsetDateTime;

import network.as2.jooq.tables.KeyPair;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyPairRecord extends UpdatableRecordImpl<KeyPairRecord> implements Record8<Long, String, String, String, String, String, String[], OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.key_pair.id</code>.
     */
    public KeyPairRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.key_pair.serial_number</code>.
     */
    public KeyPairRecord setSerialNumber(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.serial_number</code>.
     */
    public String getSerialNumber() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.key_pair.certificate</code>.
     */
    public KeyPairRecord setCertificate(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.certificate</code>.
     */
    public String getCertificate() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.key_pair.private_key</code>.
     */
    public KeyPairRecord setPrivateKey(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.private_key</code>.
     */
    public String getPrivateKey() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.key_pair.private_key_type</code>.
     */
    public KeyPairRecord setPrivateKeyType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.private_key_type</code>.
     */
    public String getPrivateKeyType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.key_pair.issuing_ca</code>.
     */
    public KeyPairRecord setIssuingCa(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.issuing_ca</code>.
     */
    public String getIssuingCa() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.key_pair.ca_chain</code>.
     */
    public KeyPairRecord setCaChain(String[] value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.ca_chain</code>.
     */
    public String[] getCaChain() {
        return (String[]) get(6);
    }

    /**
     * Setter for <code>public.key_pair.expires_at</code>.
     */
    public KeyPairRecord setExpiresAt(OffsetDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.expires_at</code>.
     */
    public OffsetDateTime getExpiresAt() {
        return (OffsetDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, String, String, String[], OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, String, String, String, String, String[], OffsetDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return KeyPair.KEY_PAIR.ID;
    }

    @Override
    public Field<String> field2() {
        return KeyPair.KEY_PAIR.SERIAL_NUMBER;
    }

    @Override
    public Field<String> field3() {
        return KeyPair.KEY_PAIR.CERTIFICATE;
    }

    @Override
    public Field<String> field4() {
        return KeyPair.KEY_PAIR.PRIVATE_KEY;
    }

    @Override
    public Field<String> field5() {
        return KeyPair.KEY_PAIR.PRIVATE_KEY_TYPE;
    }

    @Override
    public Field<String> field6() {
        return KeyPair.KEY_PAIR.ISSUING_CA;
    }

    @Override
    public Field<String[]> field7() {
        return KeyPair.KEY_PAIR.CA_CHAIN;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return KeyPair.KEY_PAIR.EXPIRES_AT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getSerialNumber();
    }

    @Override
    public String component3() {
        return getCertificate();
    }

    @Override
    public String component4() {
        return getPrivateKey();
    }

    @Override
    public String component5() {
        return getPrivateKeyType();
    }

    @Override
    public String component6() {
        return getIssuingCa();
    }

    @Override
    public String[] component7() {
        return getCaChain();
    }

    @Override
    public OffsetDateTime component8() {
        return getExpiresAt();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getSerialNumber();
    }

    @Override
    public String value3() {
        return getCertificate();
    }

    @Override
    public String value4() {
        return getPrivateKey();
    }

    @Override
    public String value5() {
        return getPrivateKeyType();
    }

    @Override
    public String value6() {
        return getIssuingCa();
    }

    @Override
    public String[] value7() {
        return getCaChain();
    }

    @Override
    public OffsetDateTime value8() {
        return getExpiresAt();
    }

    @Override
    public KeyPairRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public KeyPairRecord value2(String value) {
        setSerialNumber(value);
        return this;
    }

    @Override
    public KeyPairRecord value3(String value) {
        setCertificate(value);
        return this;
    }

    @Override
    public KeyPairRecord value4(String value) {
        setPrivateKey(value);
        return this;
    }

    @Override
    public KeyPairRecord value5(String value) {
        setPrivateKeyType(value);
        return this;
    }

    @Override
    public KeyPairRecord value6(String value) {
        setIssuingCa(value);
        return this;
    }

    @Override
    public KeyPairRecord value7(String[] value) {
        setCaChain(value);
        return this;
    }

    @Override
    public KeyPairRecord value8(OffsetDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public KeyPairRecord values(Long value1, String value2, String value3, String value4, String value5, String value6, String[] value7, OffsetDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KeyPairRecord
     */
    public KeyPairRecord() {
        super(KeyPair.KEY_PAIR);
    }

    /**
     * Create a detached, initialised KeyPairRecord
     */
    public KeyPairRecord(Long id, String serialNumber, String certificate, String privateKey, String privateKeyType, String issuingCa, String[] caChain, OffsetDateTime expiresAt) {
        super(KeyPair.KEY_PAIR);

        setId(id);
        setSerialNumber(serialNumber);
        setCertificate(certificate);
        setPrivateKey(privateKey);
        setPrivateKeyType(privateKeyType);
        setIssuingCa(issuingCa);
        setCaChain(caChain);
        setExpiresAt(expiresAt);
    }
}
