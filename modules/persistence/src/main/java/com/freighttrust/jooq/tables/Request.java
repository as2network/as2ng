/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables;


import com.freighttrust.jooq.Keys;
import com.freighttrust.jooq.Public;
import com.freighttrust.jooq.enums.RequestType;
import com.freighttrust.jooq.tables.records.RequestRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Request extends TableImpl<RequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.request</code>
     */
    public static final Request REQUEST = new Request();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestRecord> getRecordType() {
        return RequestRecord.class;
    }

    /**
     * The column <code>public.request.id</code>.
     */
    public final TableField<RequestRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.request.type</code>.
     */
    public final TableField<RequestRecord, RequestType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.asEnumDataType(com.freighttrust.jooq.enums.RequestType.class), this, "");

    /**
     * The column <code>public.request.headers</code>.
     */
    public final TableField<RequestRecord, JSONB> HEADERS = createField(DSL.name("headers"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.request.body_file_id</code>.
     */
    public final TableField<RequestRecord, Long> BODY_FILE_ID = createField(DSL.name("body_file_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.request.message_id</code>.
     */
    public final TableField<RequestRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.request.subject</code>.
     */
    public final TableField<RequestRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.request.trading_channel_id</code>.
     */
    public final TableField<RequestRecord, Long> TRADING_CHANNEL_ID = createField(DSL.name("trading_channel_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.request.original_request_id</code>.
     */
    public final TableField<RequestRecord, UUID> ORIGINAL_REQUEST_ID = createField(DSL.name("original_request_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.request.received_at</code>.
     */
    public final TableField<RequestRecord, OffsetDateTime> RECEIVED_AT = createField(DSL.name("received_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.request.delivered_at</code>.
     */
    public final TableField<RequestRecord, OffsetDateTime> DELIVERED_AT = createField(DSL.name("delivered_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.request.delivered_to</code>.
     */
    public final TableField<RequestRecord, String> DELIVERED_TO = createField(DSL.name("delivered_to"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.request.error_message</code>.
     */
    public final TableField<RequestRecord, String> ERROR_MESSAGE = createField(DSL.name("error_message"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.request.error_stack_trace</code>.
     */
    public final TableField<RequestRecord, String> ERROR_STACK_TRACE = createField(DSL.name("error_stack_trace"), SQLDataType.CLOB, this, "");

    private Request(Name alias, Table<RequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Request(Name alias, Table<RequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.request</code> table reference
     */
    public Request(String alias) {
        this(DSL.name(alias), REQUEST);
    }

    /**
     * Create an aliased <code>public.request</code> table reference
     */
    public Request(Name alias) {
        this(alias, REQUEST);
    }

    /**
     * Create a <code>public.request</code> table reference
     */
    public Request() {
        this(DSL.name("request"), null);
    }

    public <O extends Record> Request(Table<O> child, ForeignKey<O, RequestRecord> key) {
        super(child, key, REQUEST);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RequestRecord> getPrimaryKey() {
        return Keys.REQUEST_PKEY;
    }

    @Override
    public List<UniqueKey<RequestRecord>> getKeys() {
        return Arrays.<UniqueKey<RequestRecord>>asList(Keys.REQUEST_PKEY, Keys.REQUEST_MESSAGE_ID_KEY);
    }

    @Override
    public List<ForeignKey<RequestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RequestRecord, ?>>asList(Keys.REQUEST__REQUEST_TRADING_CHANNEL_ID_FKEY, Keys.REQUEST__REQUEST_ORIGINAL_REQUEST_ID_FKEY);
    }

    public TradingChannel tradingChannel() {
        return new TradingChannel(this, Keys.REQUEST__REQUEST_TRADING_CHANNEL_ID_FKEY);
    }

    public Request request() {
        return new Request(this, Keys.REQUEST__REQUEST_ORIGINAL_REQUEST_ID_FKEY);
    }

    @Override
    public Request as(String alias) {
        return new Request(DSL.name(alias), this);
    }

    @Override
    public Request as(Name alias) {
        return new Request(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Request rename(String name) {
        return new Request(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Request rename(Name name) {
        return new Request(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, RequestType, JSONB, Long, String, String, Long, UUID, OffsetDateTime, OffsetDateTime, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
