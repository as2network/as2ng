/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq;


import com.freighttrust.jooq.tables.DispositionNotification;
import com.freighttrust.jooq.tables.File;
import com.freighttrust.jooq.tables.FlywaySchemaHistory;
import com.freighttrust.jooq.tables.KeyPair;
import com.freighttrust.jooq.tables.Message;
import com.freighttrust.jooq.tables.Request;
import com.freighttrust.jooq.tables.TradingChannel;
import com.freighttrust.jooq.tables.TradingPartner;
import com.freighttrust.jooq.tables.records.DispositionNotificationRecord;
import com.freighttrust.jooq.tables.records.FileRecord;
import com.freighttrust.jooq.tables.records.FlywaySchemaHistoryRecord;
import com.freighttrust.jooq.tables.records.KeyPairRecord;
import com.freighttrust.jooq.tables.records.MessageRecord;
import com.freighttrust.jooq.tables.records.RequestRecord;
import com.freighttrust.jooq.tables.records.TradingChannelRecord;
import com.freighttrust.jooq.tables.records.TradingPartnerRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DispositionNotificationRecord> DISPOSITION_NOTIFICATION_PKEY = Internal.createUniqueKey(DispositionNotification.DISPOSITION_NOTIFICATION, DSL.name("disposition_notification_pkey"), new TableField[] { DispositionNotification.DISPOSITION_NOTIFICATION.REQUEST_ID }, true);
    public static final UniqueKey<FileRecord> FILE_PKEY = Internal.createUniqueKey(File.FILE, DSL.name("file_pkey"), new TableField[] { File.FILE.ID }, true);
    public static final UniqueKey<FileRecord> FILE_PROVIDER_METADATA_KEY = Internal.createUniqueKey(File.FILE, DSL.name("file_provider_metadata_key"), new TableField[] { File.FILE.PROVIDER, File.FILE.METADATA }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<KeyPairRecord> KEY_PAIR_CERTIFICATE_KEY = Internal.createUniqueKey(KeyPair.KEY_PAIR, DSL.name("key_pair_certificate_key"), new TableField[] { KeyPair.KEY_PAIR.CERTIFICATE }, true);
    public static final UniqueKey<KeyPairRecord> KEY_PAIR_PKEY = Internal.createUniqueKey(KeyPair.KEY_PAIR, DSL.name("key_pair_pkey"), new TableField[] { KeyPair.KEY_PAIR.ID }, true);
    public static final UniqueKey<KeyPairRecord> KEY_PAIR_PRIVATE_KEY_KEY = Internal.createUniqueKey(KeyPair.KEY_PAIR, DSL.name("key_pair_private_key_key"), new TableField[] { KeyPair.KEY_PAIR.PRIVATE_KEY }, true);
    public static final UniqueKey<MessageRecord> MESSAGE_PKEY = Internal.createUniqueKey(Message.MESSAGE, DSL.name("message_pkey"), new TableField[] { Message.MESSAGE.REQUEST_ID }, true);
    public static final UniqueKey<RequestRecord> REQUEST_MESSAGE_ID_KEY = Internal.createUniqueKey(Request.REQUEST, DSL.name("request_message_id_key"), new TableField[] { Request.REQUEST.MESSAGE_ID }, true);
    public static final UniqueKey<RequestRecord> REQUEST_PKEY = Internal.createUniqueKey(Request.REQUEST, DSL.name("request_pkey"), new TableField[] { Request.REQUEST.ID }, true);
    public static final UniqueKey<TradingChannelRecord> TRADING_CHANNEL_NAME_KEY = Internal.createUniqueKey(TradingChannel.TRADING_CHANNEL, DSL.name("trading_channel_name_key"), new TableField[] { TradingChannel.TRADING_CHANNEL.NAME }, true);
    public static final UniqueKey<TradingChannelRecord> TRADING_CHANNEL_PKEY = Internal.createUniqueKey(TradingChannel.TRADING_CHANNEL, DSL.name("trading_channel_pkey"), new TableField[] { TradingChannel.TRADING_CHANNEL.ID }, true);
    public static final UniqueKey<TradingChannelRecord> TRADING_CHANNEL_SENDER_AS2_IDENTIFIER_RECIPIENT_AS2_IDENTIF_KEY = Internal.createUniqueKey(TradingChannel.TRADING_CHANNEL, DSL.name("trading_channel_sender_as2_identifier_recipient_as2_identif_key"), new TableField[] { TradingChannel.TRADING_CHANNEL.SENDER_AS2_IDENTIFIER, TradingChannel.TRADING_CHANNEL.RECIPIENT_AS2_IDENTIFIER }, true);
    public static final UniqueKey<TradingChannelRecord> TRADING_CHANNEL_SENDER_ID_RECIPIENT_ID_KEY = Internal.createUniqueKey(TradingChannel.TRADING_CHANNEL, DSL.name("trading_channel_sender_id_recipient_id_key"), new TableField[] { TradingChannel.TRADING_CHANNEL.SENDER_ID, TradingChannel.TRADING_CHANNEL.RECIPIENT_ID }, true);
    public static final UniqueKey<TradingPartnerRecord> TRADING_PARTNER_KEY_PAIR_ID_KEY = Internal.createUniqueKey(TradingPartner.TRADING_PARTNER, DSL.name("trading_partner_key_pair_id_key"), new TableField[] { TradingPartner.TRADING_PARTNER.KEY_PAIR_ID }, true);
    public static final UniqueKey<TradingPartnerRecord> TRADING_PARTNER_NAME_KEY = Internal.createUniqueKey(TradingPartner.TRADING_PARTNER, DSL.name("trading_partner_name_key"), new TableField[] { TradingPartner.TRADING_PARTNER.NAME }, true);
    public static final UniqueKey<TradingPartnerRecord> TRADING_PARTNER_PKEY = Internal.createUniqueKey(TradingPartner.TRADING_PARTNER, DSL.name("trading_partner_pkey"), new TableField[] { TradingPartner.TRADING_PARTNER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DispositionNotificationRecord, RequestRecord> DISPOSITION_NOTIFICATION__DISPOSITION_NOTIFICATION_ORIGINAL_MESSAGE_ID_FKEY = Internal.createForeignKey(DispositionNotification.DISPOSITION_NOTIFICATION, DSL.name("disposition_notification_original_message_id_fkey"), new TableField[] { DispositionNotification.DISPOSITION_NOTIFICATION.ORIGINAL_MESSAGE_ID }, Keys.REQUEST_MESSAGE_ID_KEY, new TableField[] { Request.REQUEST.MESSAGE_ID }, true);
    public static final ForeignKey<DispositionNotificationRecord, RequestRecord> DISPOSITION_NOTIFICATION__DISPOSITION_NOTIFICATION_REQUEST_ID_FKEY = Internal.createForeignKey(DispositionNotification.DISPOSITION_NOTIFICATION, DSL.name("disposition_notification_request_id_fkey"), new TableField[] { DispositionNotification.DISPOSITION_NOTIFICATION.REQUEST_ID }, Keys.REQUEST_PKEY, new TableField[] { Request.REQUEST.ID }, true);
    public static final ForeignKey<MessageRecord, RequestRecord> MESSAGE__MESSAGE_REQUEST_ID_FKEY = Internal.createForeignKey(Message.MESSAGE, DSL.name("message_request_id_fkey"), new TableField[] { Message.MESSAGE.REQUEST_ID }, Keys.REQUEST_PKEY, new TableField[] { Request.REQUEST.ID }, true);
    public static final ForeignKey<RequestRecord, RequestRecord> REQUEST__REQUEST_ORIGINAL_REQUEST_ID_FKEY = Internal.createForeignKey(Request.REQUEST, DSL.name("request_original_request_id_fkey"), new TableField[] { Request.REQUEST.ORIGINAL_REQUEST_ID }, Keys.REQUEST_PKEY, new TableField[] { Request.REQUEST.ID }, true);
    public static final ForeignKey<RequestRecord, TradingChannelRecord> REQUEST__REQUEST_TRADING_CHANNEL_ID_FKEY = Internal.createForeignKey(Request.REQUEST, DSL.name("request_trading_channel_id_fkey"), new TableField[] { Request.REQUEST.TRADING_CHANNEL_ID }, Keys.TRADING_CHANNEL_PKEY, new TableField[] { TradingChannel.TRADING_CHANNEL.ID }, true);
    public static final ForeignKey<TradingChannelRecord, TradingPartnerRecord> TRADING_CHANNEL__TRADING_CHANNEL_RECIPIENT_ID_FKEY = Internal.createForeignKey(TradingChannel.TRADING_CHANNEL, DSL.name("trading_channel_recipient_id_fkey"), new TableField[] { TradingChannel.TRADING_CHANNEL.RECIPIENT_ID }, Keys.TRADING_PARTNER_PKEY, new TableField[] { TradingPartner.TRADING_PARTNER.ID }, true);
    public static final ForeignKey<TradingChannelRecord, KeyPairRecord> TRADING_CHANNEL__TRADING_CHANNEL_RECIPIENT_KEY_PAIR_ID_FKEY = Internal.createForeignKey(TradingChannel.TRADING_CHANNEL, DSL.name("trading_channel_recipient_key_pair_id_fkey"), new TableField[] { TradingChannel.TRADING_CHANNEL.RECIPIENT_KEY_PAIR_ID }, Keys.KEY_PAIR_PKEY, new TableField[] { KeyPair.KEY_PAIR.ID }, true);
    public static final ForeignKey<TradingChannelRecord, TradingPartnerRecord> TRADING_CHANNEL__TRADING_CHANNEL_SENDER_ID_FKEY = Internal.createForeignKey(TradingChannel.TRADING_CHANNEL, DSL.name("trading_channel_sender_id_fkey"), new TableField[] { TradingChannel.TRADING_CHANNEL.SENDER_ID }, Keys.TRADING_PARTNER_PKEY, new TableField[] { TradingPartner.TRADING_PARTNER.ID }, true);
    public static final ForeignKey<TradingChannelRecord, KeyPairRecord> TRADING_CHANNEL__TRADING_CHANNEL_SENDER_KEY_PAIR_ID_FKEY = Internal.createForeignKey(TradingChannel.TRADING_CHANNEL, DSL.name("trading_channel_sender_key_pair_id_fkey"), new TableField[] { TradingChannel.TRADING_CHANNEL.SENDER_KEY_PAIR_ID }, Keys.KEY_PAIR_PKEY, new TableField[] { KeyPair.KEY_PAIR.ID }, true);
    public static final ForeignKey<TradingPartnerRecord, KeyPairRecord> TRADING_PARTNER__TRADING_PARTNER_KEY_PAIR_ID_FKEY = Internal.createForeignKey(TradingPartner.TRADING_PARTNER, DSL.name("trading_partner_key_pair_id_fkey"), new TableField[] { TradingPartner.TRADING_PARTNER.KEY_PAIR_ID }, Keys.KEY_PAIR_PKEY, new TableField[] { KeyPair.KEY_PAIR.ID }, true);
}
