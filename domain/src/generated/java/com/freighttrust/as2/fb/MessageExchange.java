// automatically generated by the FlatBuffers compiler, do not modify

package com.freighttrust.as2.fb;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MessageExchange extends Table {
  public static MessageExchange getRootAsMessageExchange(ByteBuffer _bb) {
    return getRootAsMessageExchange(_bb, new MessageExchange());
  }

  public static MessageExchange getRootAsMessageExchange(ByteBuffer _bb, MessageExchange obj) {
    _bb.order(ByteOrder.LITTLE_ENDIAN);
    return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
  }

  public void __init(int _i, ByteBuffer _bb) {
    bb_pos = _i;
    bb = _bb;
    vtable_start = bb_pos - bb.getInt(bb_pos);
    vtable_size = bb.getShort(vtable_start);
  }

  public MessageExchange __assign(int _i, ByteBuffer _bb) {
    __init(_i, _bb);
    return this;
  }

  public String id() {
    int o = __offset(4);
    return o != 0 ? __string(o + bb_pos) : null;
  }

  public ByteBuffer idAsByteBuffer() {
    return __vector_as_bytebuffer(4, 1);
  }

  public ByteBuffer idInByteBuffer(ByteBuffer _bb) {
    return __vector_in_bytebuffer(_bb, 4, 1);
  }

  public KeyValue headers(int j) {
    return headers(new KeyValue(), j);
  }

  public KeyValue headers(KeyValue obj, int j) {
    int o = __offset(6);
    return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
  }

  public int headersLength() {
    int o = __offset(6);
    return o != 0 ? __vector_len(o) : 0;
  }

  public long startedAt() {
    int o = __offset(8);
    return o != 0 ? bb.getLong(o + bb_pos) : 0L;
  }

  public static int createMessageExchange(FlatBufferBuilder builder,
                                          int idOffset,
                                          int headersOffset,
                                          long startedAt) {
    builder.startObject(3);
    MessageExchange.addStartedAt(builder, startedAt);
    MessageExchange.addHeaders(builder, headersOffset);
    MessageExchange.addId(builder, idOffset);
    return MessageExchange.endMessageExchange(builder);
  }

  public static void startMessageExchange(FlatBufferBuilder builder) {
    builder.startObject(3);
  }

  public static void addId(FlatBufferBuilder builder, int idOffset) {
    builder.addOffset(0, idOffset, 0);
  }

  public static void addHeaders(FlatBufferBuilder builder, int headersOffset) {
    builder.addOffset(1, headersOffset, 0);
  }

  public static int createHeadersVector(FlatBufferBuilder builder, int[] data) {
    builder.startVector(4, data.length, 4);
    for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
    return builder.endVector();
  }

  public static void startHeadersVector(FlatBufferBuilder builder, int numElems) {
    builder.startVector(4, numElems, 4);
  }

  public static void addStartedAt(FlatBufferBuilder builder, long startedAt) {
    builder.addLong(2, startedAt, 0L);
  }

  public static int endMessageExchange(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

