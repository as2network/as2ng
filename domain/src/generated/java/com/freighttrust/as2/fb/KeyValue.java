// automatically generated by the FlatBuffers compiler, do not modify

package com.freighttrust.as2.fb;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class KeyValue extends Table {
  public static KeyValue getRootAsKeyValue(ByteBuffer _bb) {
    return getRootAsKeyValue(_bb, new KeyValue());
  }

  public static KeyValue getRootAsKeyValue(ByteBuffer _bb, KeyValue obj) {
    _bb.order(ByteOrder.LITTLE_ENDIAN);
    return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
  }

  public void __init(int _i, ByteBuffer _bb) {
    bb_pos = _i;
    bb = _bb;
    vtable_start = bb_pos - bb.getInt(bb_pos);
    vtable_size = bb.getShort(vtable_start);
  }

  public KeyValue __assign(int _i, ByteBuffer _bb) {
    __init(_i, _bb);
    return this;
  }

  public String key() {
    int o = __offset(4);
    return o != 0 ? __string(o + bb_pos) : null;
  }

  public ByteBuffer keyAsByteBuffer() {
    return __vector_as_bytebuffer(4, 1);
  }

  public ByteBuffer keyInByteBuffer(ByteBuffer _bb) {
    return __vector_in_bytebuffer(_bb, 4, 1);
  }

  public String value(int j) {
    int o = __offset(6);
    return o != 0 ? __string(__vector(o) + j * 4) : null;
  }

  public int valueLength() {
    int o = __offset(6);
    return o != 0 ? __vector_len(o) : 0;
  }

  public static int createKeyValue(FlatBufferBuilder builder,
                                   int keyOffset,
                                   int valueOffset) {
    builder.startObject(2);
    KeyValue.addValue(builder, valueOffset);
    KeyValue.addKey(builder, keyOffset);
    return KeyValue.endKeyValue(builder);
  }

  public static void startKeyValue(FlatBufferBuilder builder) {
    builder.startObject(2);
  }

  public static void addKey(FlatBufferBuilder builder, int keyOffset) {
    builder.addOffset(0, keyOffset, 0);
  }

  public static void addValue(FlatBufferBuilder builder, int valueOffset) {
    builder.addOffset(1, valueOffset, 0);
  }

  public static int createValueVector(FlatBufferBuilder builder, int[] data) {
    builder.startVector(4, data.length, 4);
    for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
    return builder.endVector();
  }

  public static void startValueVector(FlatBufferBuilder builder, int numElems) {
    builder.startVector(4, numElems, 4);
  }

  public static int endKeyValue(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

