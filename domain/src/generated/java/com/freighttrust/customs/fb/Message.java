// automatically generated by the FlatBuffers compiler, do not modify

package com.freighttrust.customs.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Message extends Table {
  public static Message getRootAsMessage(ByteBuffer _bb) { return getRootAsMessage(_bb, new Message()); }
  public static Message getRootAsMessage(ByteBuffer _bb, Message obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SourceMetadata sourceInfo() { return sourceInfo(new SourceMetadata()); }
  public SourceMetadata sourceInfo(SourceMetadata obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public MessageHeader header() { return header(new MessageHeader()); }
  public MessageHeader header(MessageHeader obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte payload(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int payloadLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer payloadAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer payloadInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createMessage(FlatBufferBuilder builder,
      int sourceInfoOffset,
      int headerOffset,
      int payloadOffset) {
    builder.startObject(3);
    Message.addPayload(builder, payloadOffset);
    Message.addHeader(builder, headerOffset);
    Message.addSourceInfo(builder, sourceInfoOffset);
    return Message.endMessage(builder);
  }

  public static void startMessage(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addSourceInfo(FlatBufferBuilder builder, int sourceInfoOffset) { builder.addOffset(0, sourceInfoOffset, 0); }
  public static void addHeader(FlatBufferBuilder builder, int headerOffset) { builder.addOffset(1, headerOffset, 0); }
  public static void addPayload(FlatBufferBuilder builder, int payloadOffset) { builder.addOffset(2, payloadOffset, 0); }
  public static int createPayloadVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startPayloadVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endMessage(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

