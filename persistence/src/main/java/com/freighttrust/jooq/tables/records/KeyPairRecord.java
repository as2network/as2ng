/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables.records;


import com.freighttrust.jooq.tables.KeyPair;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyPairRecord extends UpdatableRecordImpl<KeyPairRecord> implements Record4<Long, String, String, OffsetDateTime> {

    private static final long serialVersionUID = 574976592;

    /**
     * Setter for <code>public.key_pair.id</code>.
     */
    public KeyPairRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.key_pair.private_key</code>.
     */
    public KeyPairRecord setPrivateKey(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.private_key</code>.
     */
    public String getPrivateKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.key_pair.certificate</code>.
     */
    public KeyPairRecord setCertificate(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.certificate</code>.
     */
    public String getCertificate() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.key_pair.expires_at</code>.
     */
    public KeyPairRecord setExpiresAt(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.key_pair.expires_at</code>.
     */
    public OffsetDateTime getExpiresAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return KeyPair.KEY_PAIR.ID;
    }

    @Override
    public Field<String> field2() {
        return KeyPair.KEY_PAIR.PRIVATE_KEY;
    }

    @Override
    public Field<String> field3() {
        return KeyPair.KEY_PAIR.CERTIFICATE;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return KeyPair.KEY_PAIR.EXPIRES_AT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getPrivateKey();
    }

    @Override
    public String component3() {
        return getCertificate();
    }

    @Override
    public OffsetDateTime component4() {
        return getExpiresAt();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getPrivateKey();
    }

    @Override
    public String value3() {
        return getCertificate();
    }

    @Override
    public OffsetDateTime value4() {
        return getExpiresAt();
    }

    @Override
    public KeyPairRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public KeyPairRecord value2(String value) {
        setPrivateKey(value);
        return this;
    }

    @Override
    public KeyPairRecord value3(String value) {
        setCertificate(value);
        return this;
    }

    @Override
    public KeyPairRecord value4(OffsetDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public KeyPairRecord values(Long value1, String value2, String value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KeyPairRecord
     */
    public KeyPairRecord() {
        super(KeyPair.KEY_PAIR);
    }

    /**
     * Create a detached, initialised KeyPairRecord
     */
    public KeyPairRecord(Long id, String privateKey, String certificate, OffsetDateTime expiresAt) {
        super(KeyPair.KEY_PAIR);

        set(0, id);
        set(1, privateKey);
        set(2, certificate);
        set(3, expiresAt);
    }
}
