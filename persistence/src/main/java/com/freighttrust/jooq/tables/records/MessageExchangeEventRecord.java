/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables.records;


import com.freighttrust.jooq.enums.MessageExchangeEventType;
import com.freighttrust.jooq.tables.MessageExchangeEvent;
import org.jooq.*;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;
import java.time.OffsetDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageExchangeEventRecord extends UpdatableRecordImpl<MessageExchangeEventRecord> implements Record5<UUID, MessageExchangeEventType, UUID, JSONB, OffsetDateTime> {

    private static final long serialVersionUID = -1221448509;

    /**
     * Setter for <code>public.message_exchange_event.id</code>.
     */
    public MessageExchangeEventRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.message_exchange_event.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.message_exchange_event.type</code>.
     */
    public MessageExchangeEventRecord setType(MessageExchangeEventType value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.message_exchange_event.type</code>.
     */
    public MessageExchangeEventType getType() {
        return (MessageExchangeEventType) get(1);
    }

    /**
     * Setter for <code>public.message_exchange_event.message_exchange_id</code>.
     */
    public MessageExchangeEventRecord setMessageExchangeId(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.message_exchange_event.message_exchange_id</code>.
     */
    public UUID getMessageExchangeId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.message_exchange_event.data</code>.
     */
    public MessageExchangeEventRecord setData(JSONB value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.message_exchange_event.data</code>.
     */
    public JSONB getData() {
        return (JSONB) get(3);
    }

    /**
     * Setter for <code>public.message_exchange_event.timestamp</code>.
     */
    public MessageExchangeEventRecord setTimestamp(OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.message_exchange_event.timestamp</code>.
     */
    public OffsetDateTime getTimestamp() {
        return (OffsetDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, MessageExchangeEventType, UUID, JSONB, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, MessageExchangeEventType, UUID, JSONB, OffsetDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return MessageExchangeEvent.MESSAGE_EXCHANGE_EVENT.ID;
    }

    @Override
    public Field<MessageExchangeEventType> field2() {
        return MessageExchangeEvent.MESSAGE_EXCHANGE_EVENT.TYPE;
    }

    @Override
    public Field<UUID> field3() {
        return MessageExchangeEvent.MESSAGE_EXCHANGE_EVENT.MESSAGE_EXCHANGE_ID;
    }

    @Override
    public Field<JSONB> field4() {
        return MessageExchangeEvent.MESSAGE_EXCHANGE_EVENT.DATA;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return MessageExchangeEvent.MESSAGE_EXCHANGE_EVENT.TIMESTAMP;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public MessageExchangeEventType component2() {
        return getType();
    }

    @Override
    public UUID component3() {
        return getMessageExchangeId();
    }

    @Override
    public JSONB component4() {
        return getData();
    }

    @Override
    public OffsetDateTime component5() {
        return getTimestamp();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public MessageExchangeEventType value2() {
        return getType();
    }

    @Override
    public UUID value3() {
        return getMessageExchangeId();
    }

    @Override
    public JSONB value4() {
        return getData();
    }

    @Override
    public OffsetDateTime value5() {
        return getTimestamp();
    }

    @Override
    public MessageExchangeEventRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public MessageExchangeEventRecord value2(MessageExchangeEventType value) {
        setType(value);
        return this;
    }

    @Override
    public MessageExchangeEventRecord value3(UUID value) {
        setMessageExchangeId(value);
        return this;
    }

    @Override
    public MessageExchangeEventRecord value4(JSONB value) {
        setData(value);
        return this;
    }

    @Override
    public MessageExchangeEventRecord value5(OffsetDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public MessageExchangeEventRecord values(UUID value1, MessageExchangeEventType value2, UUID value3, JSONB value4, OffsetDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageExchangeEventRecord
     */
    public MessageExchangeEventRecord() {
        super(MessageExchangeEvent.MESSAGE_EXCHANGE_EVENT);
    }

    /**
     * Create a detached, initialised MessageExchangeEventRecord
     */
    public MessageExchangeEventRecord(UUID id, MessageExchangeEventType type, UUID messageExchangeId, JSONB data, OffsetDateTime timestamp) {
        super(MessageExchangeEvent.MESSAGE_EXCHANGE_EVENT);

        set(0, id);
        set(1, type);
        set(2, messageExchangeId);
        set(3, data);
        set(4, timestamp);
    }
}
