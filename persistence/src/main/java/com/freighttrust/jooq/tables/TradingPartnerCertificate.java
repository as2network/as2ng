/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables;


import com.freighttrust.jooq.Indexes;
import com.freighttrust.jooq.Keys;
import com.freighttrust.jooq.Public;
import com.freighttrust.jooq.tables.records.TradingPartnerCertificateRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TradingPartnerCertificate extends TableImpl<TradingPartnerCertificateRecord> {

    private static final long serialVersionUID = 1452753664;

    /**
     * The reference instance of <code>public.trading_partner_certificate</code>
     */
    public static final TradingPartnerCertificate TRADING_PARTNER_CERTIFICATE = new TradingPartnerCertificate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TradingPartnerCertificateRecord> getRecordType() {
        return TradingPartnerCertificateRecord.class;
    }

    /**
     * The column <code>public.trading_partner_certificate.trading_partner_id</code>.
     */
    public final TableField<TradingPartnerCertificateRecord, String> TRADING_PARTNER_ID = createField(DSL.name("trading_partner_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.trading_partner_certificate.alias</code>.
     */
    public final TableField<TradingPartnerCertificateRecord, String> ALIAS = createField(DSL.name("alias"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.trading_partner_certificate.x509_certificate</code>.
     */
    public final TableField<TradingPartnerCertificateRecord, byte[]> X509_CERTIFICATE = createField(DSL.name("x509_certificate"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>public.trading_partner_certificate</code> table reference
     */
    public TradingPartnerCertificate() {
        this(DSL.name("trading_partner_certificate"), null);
    }

    /**
     * Create an aliased <code>public.trading_partner_certificate</code> table reference
     */
    public TradingPartnerCertificate(String alias) {
        this(DSL.name(alias), TRADING_PARTNER_CERTIFICATE);
    }

    /**
     * Create an aliased <code>public.trading_partner_certificate</code> table reference
     */
    public TradingPartnerCertificate(Name alias) {
        this(alias, TRADING_PARTNER_CERTIFICATE);
    }

    private TradingPartnerCertificate(Name alias, Table<TradingPartnerCertificateRecord> aliased) {
        this(alias, aliased, null);
    }

    private TradingPartnerCertificate(Name alias, Table<TradingPartnerCertificateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TradingPartnerCertificate(Table<O> child, ForeignKey<O, TradingPartnerCertificateRecord> key) {
        super(child, key, TRADING_PARTNER_CERTIFICATE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRADING_PARTNER_CERTIFICATE_PKEY);
    }

    @Override
    public UniqueKey<TradingPartnerCertificateRecord> getPrimaryKey() {
        return Keys.TRADING_PARTNER_CERTIFICATE_PKEY;
    }

    @Override
    public List<UniqueKey<TradingPartnerCertificateRecord>> getKeys() {
        return Arrays.<UniqueKey<TradingPartnerCertificateRecord>>asList(Keys.TRADING_PARTNER_CERTIFICATE_PKEY);
    }

    @Override
    public List<ForeignKey<TradingPartnerCertificateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TradingPartnerCertificateRecord, ?>>asList(Keys.TRADING_PARTNER_CERTIFICATE__TRADING_PARTNER_CERTIFICATE_TRADING_PARTNER_ID_FKEY);
    }

    public TradingPartner tradingPartner() {
        return new TradingPartner(this, Keys.TRADING_PARTNER_CERTIFICATE__TRADING_PARTNER_CERTIFICATE_TRADING_PARTNER_ID_FKEY);
    }

    @Override
    public TradingPartnerCertificate as(String alias) {
        return new TradingPartnerCertificate(DSL.name(alias), this);
    }

    @Override
    public TradingPartnerCertificate as(Name alias) {
        return new TradingPartnerCertificate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TradingPartnerCertificate rename(String name) {
        return new TradingPartnerCertificate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TradingPartnerCertificate rename(Name name) {
        return new TradingPartnerCertificate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
