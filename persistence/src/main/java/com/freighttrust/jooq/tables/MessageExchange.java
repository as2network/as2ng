/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables;


import com.freighttrust.jooq.Indexes;
import com.freighttrust.jooq.Keys;
import com.freighttrust.jooq.Public;
import com.freighttrust.jooq.enums.MessageExchangeType;
import com.freighttrust.jooq.tables.records.MessageExchangeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageExchange extends TableImpl<MessageExchangeRecord> {

    private static final long serialVersionUID = 1397061488;

    /**
     * The reference instance of <code>public.message_exchange</code>
     */
    public static final MessageExchange MESSAGE_EXCHANGE = new MessageExchange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageExchangeRecord> getRecordType() {
        return MessageExchangeRecord.class;
    }

    /**
     * The column <code>public.message_exchange.id</code>.
     */
    public final TableField<MessageExchangeRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.message_exchange.type</code>.
     */
    public final TableField<MessageExchangeRecord, MessageExchangeType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.freighttrust.jooq.enums.MessageExchangeType.class), this, "");

    /**
     * The column <code>public.message_exchange.headers</code>.
     */
    public final TableField<MessageExchangeRecord, JSONB> HEADERS = createField(DSL.name("headers"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.message_exchange.started_at</code>.
     */
    public final TableField<MessageExchangeRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.message_exchange.finished_at</code>.
     */
    public final TableField<MessageExchangeRecord, OffsetDateTime> FINISHED_AT = createField(DSL.name("finished_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.message_exchange.elapsed_ms</code>.
     */
    public final TableField<MessageExchangeRecord, Long> ELAPSED_MS = createField(DSL.name("elapsed_ms"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.message_exchange.success</code>.
     */
    public final TableField<MessageExchangeRecord, Boolean> SUCCESS = createField(DSL.name("success"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.message_exchange.error_message</code>.
     */
    public final TableField<MessageExchangeRecord, String> ERROR_MESSAGE = createField(DSL.name("error_message"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.message_exchange.error_trace</code>.
     */
    public final TableField<MessageExchangeRecord, String> ERROR_TRACE = createField(DSL.name("error_trace"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_exchange.sender_id</code>.
     */
    public final TableField<MessageExchangeRecord, String> SENDER_ID = createField(DSL.name("sender_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.message_exchange.recipient_id</code>.
     */
    public final TableField<MessageExchangeRecord, String> RECIPIENT_ID = createField(DSL.name("recipient_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.message_exchange.message_id</code>.
     */
    public final TableField<MessageExchangeRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.message_exchange.subject</code>.
     */
    public final TableField<MessageExchangeRecord, String> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.message_exchange.encrypted</code>.
     */
    public final TableField<MessageExchangeRecord, Boolean> ENCRYPTED = createField(DSL.name("encrypted"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.message_exchange.encryption_algorithm</code>.
     */
    public final TableField<MessageExchangeRecord, String> ENCRYPTION_ALGORITHM = createField(DSL.name("encryption_algorithm"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.message_exchange.compressed</code>.
     */
    public final TableField<MessageExchangeRecord, Boolean> COMPRESSED = createField(DSL.name("compressed"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.message_exchange.signed</code>.
     */
    public final TableField<MessageExchangeRecord, Boolean> SIGNED = createField(DSL.name("signed"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.message_exchange.signing_algorithm</code>.
     */
    public final TableField<MessageExchangeRecord, String> SIGNING_ALGORITHM = createField(DSL.name("signing_algorithm"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.message_exchange.mic</code>.
     */
    public final TableField<MessageExchangeRecord, String> MIC = createField(DSL.name("mic"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.message_exchange.mic_algorithm</code>.
     */
    public final TableField<MessageExchangeRecord, String> MIC_ALGORITHM = createField(DSL.name("mic_algorithm"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * Create a <code>public.message_exchange</code> table reference
     */
    public MessageExchange() {
        this(DSL.name("message_exchange"), null);
    }

    /**
     * Create an aliased <code>public.message_exchange</code> table reference
     */
    public MessageExchange(String alias) {
        this(DSL.name(alias), MESSAGE_EXCHANGE);
    }

    /**
     * Create an aliased <code>public.message_exchange</code> table reference
     */
    public MessageExchange(Name alias) {
        this(alias, MESSAGE_EXCHANGE);
    }

    private MessageExchange(Name alias, Table<MessageExchangeRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageExchange(Name alias, Table<MessageExchangeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MessageExchange(Table<O> child, ForeignKey<O, MessageExchangeRecord> key) {
        super(child, key, MESSAGE_EXCHANGE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_MESSAGE_EXCHANGE__MESSAGE_ID, Indexes.IDX_MESSAGE_EXCHANGE__RECIPIENT_ID, Indexes.IDX_MESSAGE_EXCHANGE__SENDER_ID, Indexes.IDX_MESSAGE_EXCHANGE__TYPE, Indexes.MESSAGE_EXCHANGE_PKEY);
    }

    @Override
    public UniqueKey<MessageExchangeRecord> getPrimaryKey() {
        return Keys.MESSAGE_EXCHANGE_PKEY;
    }

    @Override
    public List<UniqueKey<MessageExchangeRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageExchangeRecord>>asList(Keys.MESSAGE_EXCHANGE_PKEY);
    }

    @Override
    public List<ForeignKey<MessageExchangeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MessageExchangeRecord, ?>>asList(Keys.MESSAGE_EXCHANGE__MESSAGE_EXCHANGE_SENDER_ID_FKEY, Keys.MESSAGE_EXCHANGE__MESSAGE_EXCHANGE_RECIPIENT_ID_FKEY);
    }

    public TradingPartner messageExchange_MessageExchangeSenderIdFkey() {
        return new TradingPartner(this, Keys.MESSAGE_EXCHANGE__MESSAGE_EXCHANGE_SENDER_ID_FKEY);
    }

    public TradingPartner messageExchange_MessageExchangeRecipientIdFkey() {
        return new TradingPartner(this, Keys.MESSAGE_EXCHANGE__MESSAGE_EXCHANGE_RECIPIENT_ID_FKEY);
    }

    @Override
    public MessageExchange as(String alias) {
        return new MessageExchange(DSL.name(alias), this);
    }

    @Override
    public MessageExchange as(Name alias) {
        return new MessageExchange(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageExchange rename(String name) {
        return new MessageExchange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageExchange rename(Name name) {
        return new MessageExchange(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<UUID, MessageExchangeType, JSONB, OffsetDateTime, OffsetDateTime, Long, Boolean, String, String, String, String, String, String, Boolean, String, Boolean, Boolean, String, String, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
