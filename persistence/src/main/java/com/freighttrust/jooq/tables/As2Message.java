/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables;


import com.freighttrust.jooq.Indexes;
import com.freighttrust.jooq.Keys;
import com.freighttrust.jooq.Public;
import com.freighttrust.jooq.tables.records.As2MessageRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = {
    "http://www.jooq.org",
    "jOOQ version:3.12.3"
  },
  comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class As2Message extends TableImpl<As2MessageRecord> {

  private static final long serialVersionUID = -1913368842;

    /**
     * The reference instance of <code>public.as2_message</code>
     */
    public static final As2Message AS2_MESSAGE = new As2Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<As2MessageRecord> getRecordType() {
        return As2MessageRecord.class;
    }

    /**
     * The column <code>public.as2_message.id</code>.
     */
    public final TableField<As2MessageRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.as2_message.from</code>.
     */
    public final TableField<As2MessageRecord, String> FROM = createField(DSL.name("from"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

  /**
   * The column <code>public.as2_message.to</code>.
   */
  public final TableField<As2MessageRecord, String> TO = createField(DSL.name("to"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

  /**
   * The column <code>public.as2_message.subject</code>.
   */
  public final TableField<As2MessageRecord, String> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

  /**
   * The column <code>public.as2_message.content_type</code>.
   */
  public final TableField<As2MessageRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

  /**
   * The column <code>public.as2_message.content_disposition</code>.
   */
  public final TableField<As2MessageRecord, String> CONTENT_DISPOSITION = createField(DSL.name("content_disposition"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

  /**
   * The column <code>public.as2_message.mic</code>.
   */
  public final TableField<As2MessageRecord, String> MIC = createField(DSL.name("mic"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

  /**
   * The column <code>public.as2_message.headers</code>.
   */
  public final TableField<As2MessageRecord, JSONB> HEADERS = createField(DSL.name("headers"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /**
   * The column <code>public.as2_message.attributes</code>.
   */
  public final TableField<As2MessageRecord, JSONB> ATTRIBUTES = createField(DSL.name("attributes"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /**
   * The column <code>public.as2_message.body_file_id</code>.
   */
  public final TableField<As2MessageRecord, Integer> BODY_FILE_ID = createField(DSL.name("body_file_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

  /**
   * Create a <code>public.as2_message</code> table reference
   */
  public As2Message() {
        this(DSL.name("as2_message"), null);
    }

    /**
     * Create an aliased <code>public.as2_message</code> table reference
     */
    public As2Message(String alias) {
        this(DSL.name(alias), AS2_MESSAGE);
    }

    /**
     * Create an aliased <code>public.as2_message</code> table reference
     */
    public As2Message(Name alias) {
        this(alias, AS2_MESSAGE);
    }

    private As2Message(Name alias, Table<As2MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private As2Message(Name alias, Table<As2MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> As2Message(Table<O> child, ForeignKey<O, As2MessageRecord> key) {
        super(child, key, AS2_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AS2_MESSAGE_PKEY);
    }

    @Override
    public UniqueKey<As2MessageRecord> getPrimaryKey() {
        return Keys.AS2_MESSAGE_PKEY;
    }

    @Override
    public List<UniqueKey<As2MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<As2MessageRecord>>asList(Keys.AS2_MESSAGE_PKEY);
    }

    @Override
    public List<ForeignKey<As2MessageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<As2MessageRecord, ?>>asList(Keys.AS2_MESSAGE__AS2_MESSAGE_FROM_FKEY, Keys.AS2_MESSAGE__AS2_MESSAGE_TO_FKEY, Keys.AS2_MESSAGE__AS2_MESSAGE_BODY_FILE_ID_FKEY);
    }

  public TradingPartner as2Message_As2MessageFromFkey() {
    return new TradingPartner(this, Keys.AS2_MESSAGE__AS2_MESSAGE_FROM_FKEY);
  }

  public TradingPartner as2Message_As2MessageToFkey() {
    return new TradingPartner(this, Keys.AS2_MESSAGE__AS2_MESSAGE_TO_FKEY);
  }

  public File file() {
    return new File(this, Keys.AS2_MESSAGE__AS2_MESSAGE_BODY_FILE_ID_FKEY);
  }

  @Override
  public As2Message as(String alias) {
    return new As2Message(DSL.name(alias), this);
  }

  @Override
  public As2Message as(Name alias) {
    return new As2Message(alias, this);
  }

  /**
   * Rename this table
   */
    @Override
    public As2Message rename(String name) {
        return new As2Message(DSL.name(name), null);
    }

  /**
   * Rename this table
   */
  @Override
  public As2Message rename(Name name) {
    return new As2Message(name, null);
  }

  // -------------------------------------------------------------------------
  // Row10 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row10<String, String, String, String, String, String, String, JSONB, JSONB, Integer> fieldsRow() {
    return (Row10) super.fieldsRow();
  }
}
