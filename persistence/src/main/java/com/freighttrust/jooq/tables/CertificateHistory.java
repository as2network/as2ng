/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables;


import com.freighttrust.jooq.Public;
import com.freighttrust.jooq.tables.records.CertificateHistoryRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CertificateHistory extends TableImpl<CertificateHistoryRecord> {

    private static final long serialVersionUID = -1974570490;

    /**
     * The reference instance of <code>public.certificate_history</code>
     */
    public static final CertificateHistory CERTIFICATE_HISTORY = new CertificateHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CertificateHistoryRecord> getRecordType() {
        return CertificateHistoryRecord.class;
    }

    /**
     * The column <code>public.certificate_history.trading_partner_id</code>.
     */
    public final TableField<CertificateHistoryRecord, String> TRADING_PARTNER_ID = createField(DSL.name("trading_partner_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.certificate_history.private_key</code>.
     */
    public final TableField<CertificateHistoryRecord, String> PRIVATE_KEY = createField(DSL.name("private_key"), org.jooq.impl.SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>public.certificate_history.x509_certificate</code>.
     */
    public final TableField<CertificateHistoryRecord, String> X509_CERTIFICATE = createField(DSL.name("x509_certificate"), org.jooq.impl.SQLDataType.VARCHAR(4096), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<CertificateHistoryRecord, Object> VALIDITY = createField(DSL.name("validity"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\""), this, "");

    /**
     * Create a <code>public.certificate_history</code> table reference
     */
    public CertificateHistory() {
        this(DSL.name("certificate_history"), null);
    }

    /**
     * Create an aliased <code>public.certificate_history</code> table reference
     */
    public CertificateHistory(String alias) {
        this(DSL.name(alias), CERTIFICATE_HISTORY);
    }

    /**
     * Create an aliased <code>public.certificate_history</code> table reference
     */
    public CertificateHistory(Name alias) {
        this(alias, CERTIFICATE_HISTORY);
    }

    private CertificateHistory(Name alias, Table<CertificateHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private CertificateHistory(Name alias, Table<CertificateHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CertificateHistory(Table<O> child, ForeignKey<O, CertificateHistoryRecord> key) {
        super(child, key, CERTIFICATE_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public CertificateHistory as(String alias) {
        return new CertificateHistory(DSL.name(alias), this);
    }

    @Override
    public CertificateHistory as(Name alias) {
        return new CertificateHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CertificateHistory rename(String name) {
        return new CertificateHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CertificateHistory rename(Name name) {
        return new CertificateHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Object> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
