/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables;


import com.freighttrust.jooq.Indexes;
import com.freighttrust.jooq.Keys;
import com.freighttrust.jooq.Public;
import com.freighttrust.jooq.tables.records.As2MdnRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class As2Mdn extends TableImpl<As2MdnRecord> {

    private static final long serialVersionUID = -2135346969;

    /**
     * The reference instance of <code>public.as2_mdn</code>
     */
    public static final As2Mdn AS2_MDN = new As2Mdn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<As2MdnRecord> getRecordType() {
        return As2MdnRecord.class;
    }

    /**
     * The column <code>public.as2_mdn.message_id</code>.
     */
    public final TableField<As2MdnRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.as2_mdn.signed</code>.
     */
    public final TableField<As2MdnRecord, Boolean> SIGNED = createField(DSL.name("signed"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.as2_mdn.mic</code>.
     */
    public final TableField<As2MdnRecord, String> MIC = createField(DSL.name("mic"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.as2_mdn.body_file_id</code>.
     */
    public final TableField<As2MdnRecord, Integer> BODY_FILE_ID = createField(DSL.name("body_file_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.as2_mdn</code> table reference
     */
    public As2Mdn() {
        this(DSL.name("as2_mdn"), null);
    }

    /**
     * Create an aliased <code>public.as2_mdn</code> table reference
     */
    public As2Mdn(String alias) {
        this(DSL.name(alias), AS2_MDN);
    }

    /**
     * Create an aliased <code>public.as2_mdn</code> table reference
     */
    public As2Mdn(Name alias) {
        this(alias, AS2_MDN);
    }

    private As2Mdn(Name alias, Table<As2MdnRecord> aliased) {
        this(alias, aliased, null);
    }

    private As2Mdn(Name alias, Table<As2MdnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> As2Mdn(Table<O> child, ForeignKey<O, As2MdnRecord> key) {
        super(child, key, AS2_MDN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AS2_MDN_PKEY);
    }

    @Override
    public UniqueKey<As2MdnRecord> getPrimaryKey() {
        return Keys.AS2_MDN_PKEY;
    }

    @Override
    public List<UniqueKey<As2MdnRecord>> getKeys() {
        return Arrays.<UniqueKey<As2MdnRecord>>asList(Keys.AS2_MDN_PKEY);
    }

    @Override
    public List<ForeignKey<As2MdnRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<As2MdnRecord, ?>>asList(Keys.AS2_MDN__AS2_MDN_MESSAGE_ID_FKEY, Keys.AS2_MDN__AS2_MDN_BODY_FILE_ID_FKEY);
    }

    public As2Message as2Message() {
        return new As2Message(this, Keys.AS2_MDN__AS2_MDN_MESSAGE_ID_FKEY);
    }

    public File file() {
        return new File(this, Keys.AS2_MDN__AS2_MDN_BODY_FILE_ID_FKEY);
    }

    @Override
    public As2Mdn as(String alias) {
        return new As2Mdn(DSL.name(alias), this);
    }

    @Override
    public As2Mdn as(Name alias) {
        return new As2Mdn(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public As2Mdn rename(String name) {
        return new As2Mdn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public As2Mdn rename(Name name) {
        return new As2Mdn(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Boolean, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
