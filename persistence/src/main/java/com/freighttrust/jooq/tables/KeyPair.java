/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables;


import com.freighttrust.jooq.Indexes;
import com.freighttrust.jooq.Keys;
import com.freighttrust.jooq.Public;
import com.freighttrust.jooq.tables.records.KeyPairRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyPair extends TableImpl<KeyPairRecord> {

    private static final long serialVersionUID = 703377892;

    /**
     * The reference instance of <code>public.key_pair</code>
     */
    public static final KeyPair KEY_PAIR = new KeyPair();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeyPairRecord> getRecordType() {
        return KeyPairRecord.class;
    }

    /**
     * The column <code>public.key_pair.id</code>.
     */
    public final TableField<KeyPairRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('key_pair_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.key_pair.private_key</code>.
     */
    public final TableField<KeyPairRecord, String> PRIVATE_KEY = createField(DSL.name("private_key"), org.jooq.impl.SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>public.key_pair.certificate</code>.
     */
    public final TableField<KeyPairRecord, String> CERTIFICATE = createField(DSL.name("certificate"), org.jooq.impl.SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>public.key_pair.expires_at</code>.
     */
    public final TableField<KeyPairRecord, OffsetDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.key_pair</code> table reference
     */
    public KeyPair() {
        this(DSL.name("key_pair"), null);
    }

    /**
     * Create an aliased <code>public.key_pair</code> table reference
     */
    public KeyPair(String alias) {
        this(DSL.name(alias), KEY_PAIR);
    }

    /**
     * Create an aliased <code>public.key_pair</code> table reference
     */
    public KeyPair(Name alias) {
        this(alias, KEY_PAIR);
    }

    private KeyPair(Name alias, Table<KeyPairRecord> aliased) {
        this(alias, aliased, null);
    }

    private KeyPair(Name alias, Table<KeyPairRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> KeyPair(Table<O> child, ForeignKey<O, KeyPairRecord> key) {
        super(child, key, KEY_PAIR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KEY_PAIR_PKEY);
    }

    @Override
    public Identity<KeyPairRecord, Long> getIdentity() {
        return Keys.IDENTITY_KEY_PAIR;
    }

    @Override
    public UniqueKey<KeyPairRecord> getPrimaryKey() {
        return Keys.KEY_PAIR_PKEY;
    }

    @Override
    public List<UniqueKey<KeyPairRecord>> getKeys() {
        return Arrays.<UniqueKey<KeyPairRecord>>asList(Keys.KEY_PAIR_PKEY);
    }

    @Override
    public KeyPair as(String alias) {
        return new KeyPair(DSL.name(alias), this);
    }

    @Override
    public KeyPair as(Name alias) {
        return new KeyPair(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyPair rename(String name) {
        return new KeyPair(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyPair rename(Name name) {
        return new KeyPair(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
