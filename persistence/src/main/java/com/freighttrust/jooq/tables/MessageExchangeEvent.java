/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.jooq.tables;


import com.freighttrust.jooq.Indexes;
import com.freighttrust.jooq.Keys;
import com.freighttrust.jooq.Public;
import com.freighttrust.jooq.enums.MessageExchangeEventType;
import com.freighttrust.jooq.tables.records.MessageExchangeEventRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageExchangeEvent extends TableImpl<MessageExchangeEventRecord> {

    private static final long serialVersionUID = -1717506354;

    /**
     * The reference instance of <code>public.message_exchange_event</code>
     */
    public static final MessageExchangeEvent MESSAGE_EXCHANGE_EVENT = new MessageExchangeEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageExchangeEventRecord> getRecordType() {
        return MessageExchangeEventRecord.class;
    }

    /**
     * The column <code>public.message_exchange_event.id</code>.
     */
    public final TableField<MessageExchangeEventRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.message_exchange_event.type</code>.
     */
    public final TableField<MessageExchangeEventRecord, MessageExchangeEventType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.freighttrust.jooq.enums.MessageExchangeEventType.class), this, "");

    /**
     * The column <code>public.message_exchange_event.message_exchange_id</code>.
     */
    public final TableField<MessageExchangeEventRecord, UUID> MESSAGE_EXCHANGE_ID = createField(DSL.name("message_exchange_id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.message_exchange_event.data</code>.
     */
    public final TableField<MessageExchangeEventRecord, JSONB> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.message_exchange_event.timestamp</code>.
     */
    public final TableField<MessageExchangeEventRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.message_exchange_event</code> table reference
     */
    public MessageExchangeEvent() {
        this(DSL.name("message_exchange_event"), null);
    }

    /**
     * Create an aliased <code>public.message_exchange_event</code> table reference
     */
    public MessageExchangeEvent(String alias) {
        this(DSL.name(alias), MESSAGE_EXCHANGE_EVENT);
    }

    /**
     * Create an aliased <code>public.message_exchange_event</code> table reference
     */
    public MessageExchangeEvent(Name alias) {
        this(alias, MESSAGE_EXCHANGE_EVENT);
    }

    private MessageExchangeEvent(Name alias, Table<MessageExchangeEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageExchangeEvent(Name alias, Table<MessageExchangeEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MessageExchangeEvent(Table<O> child, ForeignKey<O, MessageExchangeEventRecord> key) {
        super(child, key, MESSAGE_EXCHANGE_EVENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_EXCHANGE_EVENT_PKEY);
    }

    @Override
    public UniqueKey<MessageExchangeEventRecord> getPrimaryKey() {
        return Keys.MESSAGE_EXCHANGE_EVENT_PKEY;
    }

    @Override
    public List<UniqueKey<MessageExchangeEventRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageExchangeEventRecord>>asList(Keys.MESSAGE_EXCHANGE_EVENT_PKEY);
    }

    @Override
    public List<ForeignKey<MessageExchangeEventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MessageExchangeEventRecord, ?>>asList(Keys.MESSAGE_EXCHANGE_EVENT__MESSAGE_EXCHANGE_EVENT_MESSAGE_EXCHANGE_ID_FKEY);
    }

    public MessageExchange messageExchange() {
        return new MessageExchange(this, Keys.MESSAGE_EXCHANGE_EVENT__MESSAGE_EXCHANGE_EVENT_MESSAGE_EXCHANGE_ID_FKEY);
    }

    @Override
    public MessageExchangeEvent as(String alias) {
        return new MessageExchangeEvent(DSL.name(alias), this);
    }

    @Override
    public MessageExchangeEvent as(Name alias) {
        return new MessageExchangeEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageExchangeEvent rename(String name) {
        return new MessageExchangeEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageExchangeEvent rename(Name name) {
        return new MessageExchangeEvent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, MessageExchangeEventType, UUID, JSONB, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
