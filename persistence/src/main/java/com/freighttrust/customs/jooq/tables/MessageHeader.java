/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.customs.jooq.tables;


import com.freighttrust.customs.jooq.Indexes;
import com.freighttrust.customs.jooq.Keys;
import com.freighttrust.customs.jooq.Public;
import com.freighttrust.customs.jooq.enums.MessageType;
import com.freighttrust.customs.jooq.tables.records.MessageHeaderRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageHeader extends TableImpl<MessageHeaderRecord> {

    private static final long serialVersionUID = -768804806;

    /**
     * The reference instance of <code>public.message_header</code>
     */
    public static final MessageHeader MESSAGE_HEADER = new MessageHeader();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageHeaderRecord> getRecordType() {
        return MessageHeaderRecord.class;
    }

    /**
     * The column <code>public.message_header.id</code>.
     */
    public final TableField<MessageHeaderRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.message_header.type</code>.
     */
    public final TableField<MessageHeaderRecord, MessageType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.freighttrust.customs.jooq.enums.MessageType.class), this, "");

    /**
     * The column <code>public.message_header.sent_date_time</code>.
     */
    public final TableField<MessageHeaderRecord, Timestamp> SENT_DATE_TIME = createField(DSL.name("sent_date_time"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.message_header.transmitter_id</code>.
     */
    public final TableField<MessageHeaderRecord, String> TRANSMITTER_ID = createField(DSL.name("transmitter_id"), org.jooq.impl.SQLDataType.CHAR(3), this, "");

    /**
     * The column <code>public.message_header.transmitter_site_code</code>.
     */
    public final TableField<MessageHeaderRecord, Short> TRANSMITTER_SITE_CODE = createField(DSL.name("transmitter_site_code"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.message_header.preparer_id</code>.
     */
    public final TableField<MessageHeaderRecord, String> PREPARER_ID = createField(DSL.name("preparer_id"), org.jooq.impl.SQLDataType.CHAR(3), this, "");

    /**
     * The column <code>public.message_header.preparer_site_code</code>.
     */
    public final TableField<MessageHeaderRecord, Short> PREPARER_SITE_CODE = createField(DSL.name("preparer_site_code"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.message_header.comment</code>.
     */
    public final TableField<MessageHeaderRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>public.message_header</code> table reference
     */
    public MessageHeader() {
        this(DSL.name("message_header"), null);
    }

    /**
     * Create an aliased <code>public.message_header</code> table reference
     */
    public MessageHeader(String alias) {
        this(DSL.name(alias), MESSAGE_HEADER);
    }

    /**
     * Create an aliased <code>public.message_header</code> table reference
     */
    public MessageHeader(Name alias) {
        this(alias, MESSAGE_HEADER);
    }

    private MessageHeader(Name alias, Table<MessageHeaderRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageHeader(Name alias, Table<MessageHeaderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MessageHeader(Table<O> child, ForeignKey<O, MessageHeaderRecord> key) {
        super(child, key, MESSAGE_HEADER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_HEADER_PKEY);
    }

    @Override
    public UniqueKey<MessageHeaderRecord> getPrimaryKey() {
        return Keys.MESSAGE_HEADER_PKEY;
    }

    @Override
    public List<UniqueKey<MessageHeaderRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageHeaderRecord>>asList(Keys.MESSAGE_HEADER_PKEY);
    }

    @Override
    public List<ForeignKey<MessageHeaderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MessageHeaderRecord, ?>>asList(Keys.MESSAGE_HEADER__MESSAGE_HEADER_ID_FKEY);
    }

    public Message message() {
        return new Message(this, Keys.MESSAGE_HEADER__MESSAGE_HEADER_ID_FKEY);
    }

    @Override
    public MessageHeader as(String alias) {
        return new MessageHeader(DSL.name(alias), this);
    }

    @Override
    public MessageHeader as(Name alias) {
        return new MessageHeader(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageHeader rename(String name) {
        return new MessageHeader(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageHeader rename(Name name) {
        return new MessageHeader(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, MessageType, Timestamp, String, Short, String, Short, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
