/*
 * This file is generated by jOOQ.
 */
package com.freighttrust.customs.jooq.tables.records;


import com.freighttrust.customs.jooq.tables.Message;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageRecord extends UpdatableRecordImpl<MessageRecord> implements Record2<String, byte[]> {

    private static final long serialVersionUID = 1531620912;

    /**
     * Setter for <code>public.message.id</code>.
     */
    public MessageRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.message.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.message.payload</code>.
     */
    public MessageRecord setPayload(byte... value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.message.payload</code>.
     */
    public byte[] getPayload() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Message.MESSAGE.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return Message.MESSAGE.PAYLOAD;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getPayload();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getPayload();
    }

    @Override
    public MessageRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public MessageRecord value2(byte... value) {
        setPayload(value);
        return this;
    }

    @Override
    public MessageRecord values(String value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageRecord
     */
    public MessageRecord() {
        super(Message.MESSAGE);
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(String id, byte[] payload) {
        super(Message.MESSAGE);

        set(0, id);
        set(1, payload);
    }
}
